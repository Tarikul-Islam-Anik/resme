generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String?        @unique
  emailVerified Boolean?       @default(false)
  password      String?
  bio           String?
  image         String?
  coverImage    String?
  accounts      Account[]
  sessions      Session[]
  analytics     Analytics?
  personalInfo  PersonalInfo[]
  skills        Skill[]
  educations    Education[]
  projects      Project[]
  experiences   Experience[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Non-NextAuth.js models

model Analytics {
  id        String @id @default(cuid())
  clicks    Int    @default(0)
  downloads Int    @default(0)

  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userEmail])
  @@index([userEmail])
}

model PersonalInfo {
  about      String?
  address    String?
  experience String?
  country    String?
  gender     String?
  dob        String?
  phone      String?
  userEmail  String
  user       User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([userEmail])
  @@unique([userEmail])
  @@index([userEmail])
}

model Skill {
  name      String
  userEmail String
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([name, userEmail])
  @@unique([userEmail])
  @@index([userEmail])
}

model Education {
  school    String
  degree    String
  field     String
  grade     String
  start     String
  end       String?
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([school, userEmail])
  @@index([userEmail])
}

model Project {
  name      String
  desc      String
  website   String?
  start     String
  end       String?
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([name, userEmail])
  @@index([userEmail])
}

model Experience {
  company   String
  position  String
  type      String
  desc      String
  start     String
  end       String?
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([company, userEmail])
  @@unique([userEmail])
  @@index([userEmail])
}
